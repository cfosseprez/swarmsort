name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Main job for testing, linting, and type-checking.
  # It runs on a matrix of operating systems and Python versions.
  test:
    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Test on all supported Python versions across all supported OSes to ensure
        # broad compatibility.
        # Python 3.12 is excluded as it's not supported by pyproject.toml (<3.12).
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        cache-poetry: true # Cache the poetry installer itself
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        # The key includes the OS, Python version, and a hash of the lock file.
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      # Run install only if no cache was found.
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev --no-interaction
    
    - name: Run linters and type checks
      # Run these checks only once on the primary configuration to avoid redundant work.
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        poetry run black --check swarmsort/ tests/ examples/
        poetry run flake8 swarmsort/ tests/ examples/
        poetry run mypy swarmsort/ --ignore-missing-imports
    
    - name: Run tests with coverage
      # The pytest configuration in tests/pytest.ini handles coverage reports (including xml for codecov).
      run: poetry run pytest
    
    - name: Upload coverage to Codecov
      # Upload coverage only from the primary test job to avoid conflicts.
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        # The token is not required for public repositories.
        fail_ci_if_error: true # Fail CI if Codecov upload fails

  # Optional job for performance benchmarks.
  # This job is expensive and runs only on pushes to main/develop or when a
  # 'run-performance' label is added to a pull request.
  performance:
    runs-on: ubuntu-latest
    needs: test # Run only after main tests pass
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) || contains(github.event.pull_request.labels.*.name, 'run-performance')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --with dev
    
    - name: Run performance tests
      run: poetry run pytest tests/test_performance.py --benchmark-only --benchmark-sort=mean